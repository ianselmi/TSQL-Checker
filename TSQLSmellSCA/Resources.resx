<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateResourceManager" xml:space="preserve">
    <value>Can't create ResourceManager for {0} from {1}.</value>
  </data>
  <data name="ResourceBaseName" xml:space="preserve">
    <value>TSQLSmellSCA.Resources</value>
  </data>
  <data name="TSQLSmell_RuleName01" xml:space="preserve">
    <value>Avoid cross server joins</value>
  </data>
  <data name="TSQLSmell_RuleName02" xml:space="preserve">
    <value>Best practice is to use two part naming</value>
  </data>
  <data name="TSQLSmell_RuleName03" xml:space="preserve">
    <value>Dirty Reads cause consistency errors</value>
  </data>
  <data name="TSQLSmell_RuleName04" xml:space="preserve">
    <value>Dont Override the optimizer</value>
  </data>
  <data name="TSQLSmell_RuleName05" xml:space="preserve">
    <value>Avoid use of 'Select *'</value>
  </data>
  <data name="TSQLSmell_RuleName06" xml:space="preserve">
    <value>Avoid Explicit Conversion of Columnar data</value>
  </data>
  <data name="TSQLSmell_RuleName07" xml:space="preserve">
    <value>Avoid use of ordinal positions in ORDER BY Clauses</value>
  </data>
  <data name="TSQLSmell_RuleName08" xml:space="preserve">
    <value>Dont Change DateFormat</value>
  </data>
  <data name="TSQLSmell_RuleName09" xml:space="preserve">
    <value>Dont Change DateFirst</value>
  </data>
  <data name="TSQLSmell_RuleName10" xml:space="preserve">
    <value>ReadUnCommitted: Dirty reads can cause consistency errors</value>
  </data>
  <data name="TSQLSmell_RuleName11" xml:space="preserve">
    <value>Single character aliases are poor practice</value>
  </data>
  <data name="TSQLSmell_RuleName12" xml:space="preserve">
    <value>Missing Column specifications on insert</value>
  </data>
  <data name="TSQLSmell_RuleName13" xml:space="preserve">
    <value>CONCAT_NULL_YIELDS_NULL should be on</value>
  </data>
  <data name="TSQLSmell_RuleName14" xml:space="preserve">
    <value>ANSI_NULLS should be On</value>
  </data>
  <data name="TSQLSmell_RuleName15" xml:space="preserve">
    <value>ANSI_PADDING should be On</value>
  </data>
  <data name="TSQLSmell_RuleName16" xml:space="preserve">
    <value>ANSI_WARNINGS should be On</value>
  </data>
  <data name="TSQLSmell_RuleName17" xml:space="preserve">
    <value>ARITHABORT should be On</value>
  </data>
  <data name="TSQLSmell_RuleName18" xml:space="preserve">
    <value>NUMERIC_ROUNDABORT should be Off</value>
  </data>
  <data name="TSQLSmell_RuleName19" xml:space="preserve">
    <value>QUOTED_IDENTIFIER should be ON</value>
  </data>
  <data name="TSQLSmell_RuleName20" xml:space="preserve">
    <value>FORCEPLAN should be OFF</value>
  </data>
  <data name="TSQLSmell_RuleName21" xml:space="preserve">
    <value>Use 2 part naming in EXECUTE statements</value>
  </data>
  <data name="TSQLSmell_RuleName22" xml:space="preserve">
    <value>Identity value should be agnostic</value>
  </data>
  <data name="TSQLSmell_RuleName23" xml:space="preserve">
    <value>Avoid single line comments</value>
  </data>
  <data name="TSQLSmell_RuleName24" xml:space="preserve">
    <value>Use two part naming</value>
  </data>
  <data name="TSQLSmell_RuleName25" xml:space="preserve">
    <value>RANGE windows are much slower then ROWS (Explicit use)</value>
  </data>
  <data name="TSQLSmell_RuleName26" xml:space="preserve">
    <value>RANGE windows are much slower then ROWS (Implicit use)</value>
  </data>
  <data name="TSQLSmell_RuleName27" xml:space="preserve">
    <value>Create table statements should specify schema</value>
  </data>
  <data name="TSQLSmell_RuleName28" xml:space="preserve">
    <value>Ordering in a view does not guarantee result set ordering</value>
  </data>
  <data name="TSQLSmell_RuleName29" xml:space="preserve">
    <value>Cursors default to writable.  Specify FAST_FORWARD</value>
  </data>
  <data name="TSQLSmell_RuleName30" xml:space="preserve">
    <value>Include SET NOCOUNT ON inside stored procedures</value>
  </data>
  <data name="TSQLSmell_RuleName31" xml:space="preserve">
    <value>EXISTS/NOT EXISTS can be more performant than COUNT(*)</value>
  </data>
  <data name="TSQLSmell_RuleName32" xml:space="preserve">
    <value>Ordering in a derived table does not guarantee result set ordering</value>
  </data>
  <data name="TSQLSmell_RuleName33" xml:space="preserve">
    <value>Single character variable names are poor practice</value>
  </data>
  <data name="TSQLSmell_RuleName34" xml:space="preserve">
    <value>Expression used with TOP should be wrapped in parenthises</value>
  </data>
  <data name="TSQLSmell_RuleName35" xml:space="preserve">
    <value>TOP(100) percent is ignored by the optimizer</value>
  </data>
  <data name="TSQLSmell_RuleName36" xml:space="preserve">
    <value>Foreign Key Constraints should be named</value>
  </data>
  <data name="TSQLSmell_RuleName37" xml:space="preserve">
    <value>Check Constraints should be named</value>
  </data>
  <data name="TSQLSmell_RuleName38" xml:space="preserve">
    <value>Primary Key Constraints on temporary tables should not be named</value>
  </data>
  <data name="TSQLSmell_RuleName39" xml:space="preserve">
    <value>Default Constraints on temporary tables should not be named</value>
  </data>
  <data name="TSQLSmell_RuleName40" xml:space="preserve">
    <value>Foreign Key Constraints on temporary tables should not be named</value>
  </data>
  <data name="TSQLSmell_RuleName41" xml:space="preserve">
    <value>Check Constraints on temporary tables should not be named</value>
  </data>
  <data name="TSQLSmell_RuleName42" xml:space="preserve">
    <value>Use of SET ROWCOUNT is deprecated : use TOP</value>
  </data>
  <data name="TSQLSmell_RuleName43" xml:space="preserve">
    <value>Potential SQL Injection Issue</value>
  </data>
  <data name="TSQLSmell_RuleName44" xml:space="preserve">
    <value>Dont override the optimizer ( FORCESCAN )</value>
  </data>
  <data name="TSQLSmell_RuleName45" xml:space="preserve">
    <value>Dont override the optimizer ( Index Hint)</value>
  </data>
  <data name="TSQLSmell_RuleName46" xml:space="preserve">
    <value>"= Null" Comparison</value>
  </data>
  <data name="TSQLSmell_RuleName47" xml:space="preserve">
    <value>Use of deprecated data type</value>
  </data>
  <data name="TSQLSmell_RuleName48" xml:space="preserve">
    <value>TSQLSmell_RuleName48</value>
  </data>
  <data name="TSQLSmell_RuleName49" xml:space="preserve">
    <value>TSQLSmell_RuleName49</value>
  </data>
  <data name="TSQLSmell_RuleName50" xml:space="preserve">
    <value>TSQLSmell_RuleName50</value>
  </data>
  <data name="TSQLSmell_RuleName51" xml:space="preserve">
    <value>RAISEERROR problem</value>
  </data>
</root>